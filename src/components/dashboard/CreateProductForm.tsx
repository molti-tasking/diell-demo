"use client";
import { createProduct } from "@/actions/product";
import { Button } from "@/components/ui/button";
import {
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { toast } from "@/components/ui/use-toast";
import { getProductSlug } from "@/lib/util/slug";
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { SubmitHandler, useForm } from "react-hook-form";
import { z } from "zod";

// Define the form schema using Zod
const formSchema = z.object({
  title: z.string(),

  // These 3 values should be autogenerated
  slug: z.string(),
});

// TypeScript interface for the form data based on the schema
type FormData = z.infer<typeof formSchema>;

interface CreateProductFormProps {
  organizationId: string;
  onCreated?: (productId: string) => void;
}
export const CreateProductForm = ({
  organizationId,
  onCreated,
}: CreateProductFormProps) => {
  const t = useTranslations();

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      slug: "",
    },
  });

  const onSubmit: SubmitHandler<FormData> = async (data) => {
    try {
      const slug = getProductSlug(data.title);

      console.log("Attempt to create product with: ", { ...data, slug });
      const res = await createProduct({
        organization_id: organizationId,
        ...data,
        slug,
      });
      console.log(res);
      if (res.error) {
        throw Error(res.error.message);
      }
      const newId = res.data[0].id;
      onCreated?.(newId);
    } catch (error) {
      if (error instanceof Error) {
        toast({
          title: t("error-occured"),
          variant: "destructive",
          description: error.message,
        });
      } else {
        toast({
          title: t("error-unknown"),
          variant: "destructive",
          description: JSON.stringify(error),
        });
      }
    }
  };

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="flex flex-col gap-4"
      >
        <DialogHeader>
          <DialogTitle>{t("create-product")}</DialogTitle>
          <DialogDescription>{t("create-product-info")}</DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t("title")}</FormLabel>
                <FormControl>
                  <Input placeholder={t("title")} {...field} />
                </FormControl>

                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <DialogFooter>
          <Button type="submit">{t("create-product")}</Button>
        </DialogFooter>
      </form>
    </Form>
  );
};
